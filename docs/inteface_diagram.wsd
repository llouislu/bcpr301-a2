@startuml
interface MySourceReader {
+ <<constructor>> MySourceReader(Parser)
' !! not sure the type of file
+ <<constructor>> MySourceReader(Parser, list)
+ go() : void
}
interface MyParser{
+ <<constructor>> MyParser(Drawer)
+ parse(list) : void
}
interface GraphicsDrawer{
+ <<constructor>> GraphicsDrawer()
+ select_pen(str) : void
+ pen_down() : void
+ pen_up() : void
+ go_along(str) : void
+ go_down(str) : void
+ draw_line(int, int) : void
+ draw_circle(int) : void
+ draw_rectangle(int) : void
' !!size is not used
+ draw_triangle(size) : void
+ end() : void
}
interface TkinterDrawer{
+ <<constructor>> TkinterDrawer()
+ select_pen(int) : void
+ pen_down() : void
+ pen_up() : void
+ go_along(float) : void
+ go_along(int) : void
+ go_down(float) : void
+ go_down(int) : void
+ draw_line(int, int) : void
+ draw_circle(int) : void
' !!size is not used
+ draw_rectangle(int) : void
' !!size is not used
+ draw_triangle(int) : void
+ end() : void
}
interface TurtleDrawer{
+ <<constructor>> TurtleDrawer()
+ select_pen() : void
+ pen_down() : void
+ pen_up() : void
+ go_along() : void
+ go_down() : void
+ draw_line() : void
+ draw_circle() : void
+ draw_rectangle() : void
+ draw_triangle() : void
+ end() : void
}
interface TurtlePrompt{
' + do_p(int) : void
' + do_d() : void
' + do_u() : void
' + do_x() : void
' + do_y() : void
' + do_n() : void
' + do_e() : void
' + do_w() : void
' + do_s() : void
' + do_c() : void
' + do_r() : void
' + do_t() : void
' + do_exit() : void
' + default() : void
+ go() : void
}
' interface ErrorChecking {
' check()
' notAInt()
' notAString()
' notAList()
' notABool()
' notAFloat()
' notAFloatOrInt()
' error_message()
' }
' interface Dest{
' getDesination()
' }


MySourceReader --|> "1" MyParser
MyParser --|> "1" GraphicsDrawer
MyParser --|> "1" TkinterDrawer
MyParser --|> "1" TurtleDrawer
MyParser --|> "1" TurtlePrompt
' ErrorChecking --|> "1" GraphicsDrawer
' ErrorChecking --|> "1" TkinterDrawer
' ErrorChecking --|> "1" TurtleDrawer
' Dest "1" --|> "1" TkinterDrawer
' Dest --|> "1" GraphicsDrawer
@enduml